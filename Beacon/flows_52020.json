[{"id":"d8a6f7d1.58d348","type":"tab","label":"Beacon Backend Code","disabled":false,"info":""},{"id":"c75ce11b.5a9b8","type":"mqtt in","z":"d8a6f7d1.58d348","name":"","topic":"beacon/output","qos":"2","datatype":"auto","broker":"513bf68b.579ef8","x":890,"y":580,"wires":[["dfe7c580.5bd138"]]},{"id":"dfe7c580.5bd138","type":"debug","z":"d8a6f7d1.58d348","name":"Raspberry Pi Input","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":1110,"y":580,"wires":[]},{"id":"4e384cad.b89064","type":"mqtt out","z":"d8a6f7d1.58d348","name":"","topic":"","qos":"2","retain":"","broker":"513bf68b.579ef8","x":590,"y":560,"wires":[]},{"id":"f497c4ca.9b7268","type":"inject","z":"d8a6f7d1.58d348","name":"Beacon1Position","topic":"beacon/output","payload":"ID,B1,Lat,37.4273550,Long,-122.1698480","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":220,"y":560,"wires":[["4e384cad.b89064"]]},{"id":"7845cf86.5bef4","type":"comment","z":"d8a6f7d1.58d348","name":"Data sent by beacon1 when movement detected","info":"","x":340,"y":580,"wires":[]},{"id":"2f6be548.43e50a","type":"inject","z":"d8a6f7d1.58d348","name":"Beacon1ID","topic":"beacon/output","payload":"ID,B1,Cont,MC-741","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":200,"y":620,"wires":[["4e384cad.b89064"]]},{"id":"1807589f.3aac27","type":"comment","z":"d8a6f7d1.58d348","name":"Data sent by beacon1 when valid container ID detected","info":"The beacon will receive a list of valid container IDs from the server. Once a valid one is detected, it sends the detected ID which pairs the beacon with the container","x":360,"y":640,"wires":[]},{"id":"7bc7a699.da3a38","type":"comment","z":"d8a6f7d1.58d348","name":"Beacon Output","info":"","x":600,"y":520,"wires":[]},{"id":"5ccd5c7e.be59a4","type":"comment","z":"d8a6f7d1.58d348","name":"Data being received from beacon","info":"","x":990,"y":540,"wires":[]},{"id":"40e10cd0.96ea64","type":"mqtt out","z":"d8a6f7d1.58d348","name":"","topic":"","qos":"2","retain":"","broker":"513bf68b.579ef8","x":570,"y":800,"wires":[]},{"id":"6ee824e6.1a0c7c","type":"comment","z":"d8a6f7d1.58d348","name":"Beacon Input","info":"","x":570,"y":760,"wires":[]},{"id":"a1fe6920.4cade8","type":"inject","z":"d8a6f7d1.58d348","name":"ValidContainerIDs","topic":"beacon/input","payload":"Containers, MC-734, MC-821, MC-824, MC-741","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":270,"y":800,"wires":[["40e10cd0.96ea64"]]},{"id":"6f90dd41.9e5d54","type":"comment","z":"d8a6f7d1.58d348","name":"List of valid container IDs sent to beacon","info":"","x":360,"y":820,"wires":[]},{"id":"77da7573.f1718c","type":"inject","z":"d8a6f7d1.58d348","name":"BeaconCommand","topic":"beacon/input","payload":"ID,B1,Comm, 01","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":270,"y":860,"wires":[["40e10cd0.96ea64"]]},{"id":"9e98390e.06a1c8","type":"comment","z":"d8a6f7d1.58d348","name":"Sends a command to a specific beacon","info":"Exact form and function of command is undefined\nIt may light an LED or trigger a position update or put it to sleep","x":350,"y":880,"wires":[]},{"id":"8852bac2.98b1b8","type":"mqtt in","z":"d8a6f7d1.58d348","name":"","topic":"beacon/input","qos":"2","datatype":"auto","broker":"513bf68b.579ef8","x":890,"y":680,"wires":[["7a8162d9.1d533c"]]},{"id":"7a8162d9.1d533c","type":"debug","z":"d8a6f7d1.58d348","name":"Raspberry Pi Output","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":1100,"y":680,"wires":[]},{"id":"e4743e2d.6aca4","type":"comment","z":"d8a6f7d1.58d348","name":"Data being set to beacon","info":"","x":970,"y":640,"wires":[]},{"id":"e6e50cf0.39597","type":"function","z":"d8a6f7d1.58d348","name":"Store beacon data","func":"//Radius of the earth\nvar R = 6.371 * 10^6;\n\n//Array of beacons\nvar BeaconList = flow.get(\"BeaconList\");\nif(!BeaconList){\n    BeaconList = [];\n}\n\n//Array of currently being tracked container IDs\nvar ContainerList = flow.get(\"ContainerList\");\nif(!ContainerList){\n    ContainerList = [];\n}\n\n//Class that stores data on each on the beacons\nclass Beacon {\n    constructor(ID, long, lat){\n        this.id = ID;\n        this.container = null;\n        this.long = long;\n        this.lat = lat;\n        this.x = 0;\n        this.y = 0;\n    }\n\n    //Set the longitudinal position of the beacon\n    /**\n     * @param {Number} long_new\n     */\n    setLong(long_new){\n        //Calculate the corrected Lon\n        var AnchorLong = flow.get(\"AnchorLong\")||0;\n        var RealLong = flow.get(\"RealAnchorLong\")||AnchorLong;\n\n        this.long = RealLong + long_new - AnchorLong;\n        //this.long = long_new;\n    }\n    //Set the latitudinal position of the beacon\n    /**\n     * @param {Number} lat_new\n     */\n    setLat(lat_new){\n        //Calculate the corrected Lat\n        var AnchorLat = flow.get(\"AnchorLat\")||0;\n        var RealLat = flow.get(\"RealAnchorLat\")||AnchorLat;\n        this.lat = RealLat + lat_new - AnchorLat;\n        //this.lat = lat_new;\n    }\n\n    /**\n     * @param {String} container_new\n     */\n    setContainer(container_new){\n        this.container = container_new\n    }\n\n    //Returns the current container associated with this beacon\n    get getContainer(){\n        return this.container;\n    }\n\n    //Returns the current beacon ID\n    get getID(){\n        return this.id;\n    }\n    \n    //Returns the current Long\n    get getLong(){\n        return this.long;\n    }\n    //Return the current lat\n    get getLat(){\n        return this.lat;\n    }\n\n    //Get X and Y position relative to the anchor beacon\n    get positionX(){\n        //Update the x position\n        this.x = 2*R*Math.cos((this.lat + AnchorLat)/2)*Math.sin(((this.long - AnchorLong))/2);\n\n        //return the x position\n        return this.x\n    }\n    get positionY(){\n        //Update the y position\n        this.y = 2*R*Math.sin(((this.lat-AnchorLat))/2)\n\n        //return the y position\n        return this.y;\n    }\n}\n\n//Takes an MQTT command and sends it to the appropriate section\n//Does not send if the command does not match\n//This code is initializing or sending new position data for a beacon\nvar MQTTMessage = msg.payload;\nvar MQTTTopic = msg.topic;\nif(MQTTTopic == \"beacon/output\"){\n    if (MQTTMessage.includes(\"ID\") && MQTTMessage.includes(\"Long\") && MQTTMessage.includes(\"Lat\")){\n        UpdateBeacon(MQTTMessage);\n    }\n    else if(MQTTMessage.includes(\"ID\") && MQTTMessage.includes(\"Cont\")){\n        PairContainer(MQTTMessage)\n    }\n    else if(MQTTMessage.includes(\"ID\") && MQTTMessage.includes(\"Batt\")){\n        //Send the battery message straight to the server\n        msg.topic = \"server/battery\";\n        node.send(msg);\n    }\n}\nelse if (MQTTTopic == \"server/position_in\"){\n    //Update the anchor\n    if (MQTTMessage.includes (\"Anchor\")){\n        UpdateAnchor(MQTTMessage);\n    }\n    //Get anchor position\n    else{\n        GetContainerPosition(MQTTMessage);\n    }\n    \n}\nelse if (MQTTTopic == \"server/cont_rm\"){\n    RemoveContainer(MQTTMessage);\n}\nelse if (MQTTTopic == \"server/cond_add\"){\n    AddContainer(MQTTMessage);\n}\n\n//Updates the anchor\nfunction UpdateAnchor(MQTTINPUT){\n    //Split input into sections basec on commas\n    var MQTTData = MQTTINPUT.split(',');\n\n    //Anchor,Lat,XXXX,Long,XXXX\n    var AnchLong = parseFloat(MQTTData[MQTTData.indexOf(\"Long\")+1]);\n    var AnchLat = parseFloat(MQTTData[MQTTData.indexOf(\"Lat\")+1]);\n    \n    //Update the anchor position\n    flow.set(\"RealAnchorLong\", AnchLong);\n    flow.set(\"RealAnchorLat\", AnchLat);\n    \n}\n\n//Called by BeaconMQTTHandler\n//Updates the beacon data in the list\nfunction UpdateBeacon(MQTTINPUT){\n    //Split input into sections basec on commas\n    var MQTTData = MQTTINPUT.split(',');\n\n    //Get ID from the input, ID is one index after ID\n    var BeaconID = MQTTData[MQTTData.indexOf(\"ID\")+1];\n    var BeaconLong = parseFloat(MQTTData[MQTTData.indexOf(\"Long\")+1]);\n    var BeaconLat = parseFloat(MQTTData[MQTTData.indexOf(\"Lat\")+1]);\n    \n    //If it is the anchor, update the anchor\n    //The anchor will have an ID A0\n    if(BeaconID == \"A0\"){\n        AnchorLong = BeaconLong;\n        AnchorLat = BeaconLat;\n        flow.set(\"AnchorLong\", AnchorLong);\n        flow.set(\"AnchorLat\", AnchorLat);\n        \n    }\n    //Otherwise, what was detected must have been a beacon\n    else{\n        //Check if it matches any ID currently stored\n        var contains = false;\n        for(i=0; i<BeaconList.length; ++i){\n            //Check if the beacon ID matches\n            if(BeaconList[i].getID == BeaconID){\n                //If it matches, update the long and lat\n                BeaconList[i].setLong(BeaconLong);\n                BeaconList[i].setLat(BeaconLat);\n                contains = true;\n                flow.set(\"BeaconList\", BeaconList);\n                \n                //Send its position to the server\n                var ReturnString = \"ID,\".concat(BeaconID,\",Lat,\",BeaconList[i].getLat,\",Long,\",BeaconList[i].getLong);\n                msg.topic = \"server/position_out\";\n                msg.payload = ReturnString;\n                node.send(msg);\n            }\n        } \n        //If no beacon matches, add it to the list\n        if(contains === false){\n            let newBeacon = new Beacon(BeaconID, BeaconLong, BeaconLat);\n            BeaconList.push(newBeacon);\n            flow.set(\"BeaconList\", BeaconList);\n            \n            //Issue a list of all valid containers to the beacon\n            var ReturnMQTT = 'ID';\n            ReturnMQTT = ReturnMQTT.concat(',', BeaconID, ',ContainerList');\n            for(j=0; j<ContainerList.length; ++i){\n                ReturnMQTT = RETURNMQTT.concat(',',ContainerList[j]);\n            }\n            msg.topic = \"beacon/input\";\n            msg.payload = ReturnMQTT;\n            node.send(msg);\n        }\n    }\n}\n\n//Called by beacon MQTT handler\n//Pairs a beacon with a container\nfunction PairContainer(MQTTINPUT){\n    //Split input into sections basec on commas\n    var MQTTData = MQTTINPUT.split(',');\n    //Get ID from the input, ID is one index after ID\n    var BeaconID = MQTTData[MQTTData.indexOf(\"ID\")+1];\n    //Get container name from the input, located one index after Cont\n    var ContainerID = MQTTData[MQTTData.indexOf(\"Cont\")+1];\n\n    //Locate the beacon ID in the list and add the container ID\n    for(i=0; i<BeaconList.length; ++i){\n        //Check if the beacon ID matches\n        if(BeaconList[i].getID == BeaconID){\n            //Set the containerID\n            BeaconList[i].setContainer(ContainerID);\n            flow.set(\"BeaconList\", BeaconList);\n            //Issue a list of containers for pairing to the beacon\n            //TODO\n            //var ReturnMQTT = 'ID';\n            //ReturnMQTT = ReturnMQTT.concat(',', BeaconID, 'ContainerPaired');\n            //BeaconSendMQTT(ReturnMQTT);\n        }\n    }\n}\n\n//Returns the current position of a container\nfunction GetContainerPosition(ContainerID){\n    \n    var x1=0, x2=0, y1=0, y2=0, num=0, angle = 0, xavg = 0, yavg = 0;\n    var lat1=0, lat2=0, long1=0, long2=0, latavg=0, longavg=0;\n    //If there are two, return the average xy and angle\n    for(i=0; i<BeaconList.length; ++i){\n        if(BeaconList[i].container == ContainerID){\n            //If this is the first beacon, move to 1\n            if(num < 1){\n                x1 = BeaconList[i].positionX;\n                y1 = BeaconList[i].positionY;\n                long1 = BeaconList[i].getLong;\n                lat1 = BeaconList[i].getLat;\n                ++num;\n            }\n            //If this is the second beacon, add to 2\n            else{\n                x2 = BeaconList[i].positionX;\n                y2 = BeaconList[i].positionY;\n                long2 = BeaconList[i].getLong;\n                lat2 = BeaconList[i].getLat;\n                ++num;\n            }\n        }\n    }\n    //If there is only one, return the xy and 0 angle\n    if(num == 1){\n        xavg = x1;\n        yavg = y1;\n        latavg = lat1;\n        longavg = long1;\n    }\n    //Otherwise, calculate the average pos and angle of the container\n    else{\n        xavg = (x1+x2)/2;\n        yavg = (y1+y2)/2;\n        latavg = (lat1+lat2)/2\n        longavg = (long1+long2)/2\n        angle = Math.atan2(y2-y1, x2-x1) * 180 / Math.PI;\n    }\n    \n    var ReturnString = ContainerID.concat(\",Lat,\",latavg,\",Long,\",longavg,\",Ang,\",angle);\n    msg.topic = \"server/position_out\";\n    msg.payload = ReturnString;\n    node.send(msg);\n}\n\n//Removes a container from the list\nfunction RemoveContainer(ContainerID){\n//Removes beacons associated with a container\n    //Find all beacons associated with a container ID\n    for(i=0; i<BeaconList.length; ++i){\n        //Check if the container ID matches\n        if(BeaconList[i].container == ContainerID){\n            BeaconList.splice(i,1);\n            flow.set(\"BeaconList\", BeaconList);\n            //Move the indexing back to ensure we don't skip one\n            --i;\n        }\n    }\n    //Remove the container from the list\n    for(i=0; i<ContainerList.length; ++i){\n        if(ContainerList[i] == ContainerID){\n            ContainerList.splice(i,1);\n            flow.set(\"ContainerList\", ContainerList);\n            --i;\n        }\n    }\n}\n\n//Adds a container to the list of being tracked\nfunction AddContainer(ContainerID){\n    var DoesNotContain = true;\n    //Check if the list currently contains the container\n    //Only add the container if it is not here\n    for(i=0; i<ContainerList.length; ++i){\n        if(ContainerList[i] == ContainerID){\n            DoesNotContain = false;\n        }\n    }\n    if(DoesNotContain){\n        ContainerList.push(ContainerID);\n        flow.set(\"ContainerList\", ContainerList);\n    }\n}\n\nreturn null;","outputs":1,"noerr":0,"x":950,"y":260,"wires":[["76c28202.afd5ac"]]},{"id":"9134f927.ba6018","type":"mqtt in","z":"d8a6f7d1.58d348","name":"","topic":"beacon/output","qos":"2","datatype":"utf8","broker":"513bf68b.579ef8","x":710,"y":260,"wires":[["e6e50cf0.39597"]]},{"id":"76c28202.afd5ac","type":"mqtt out","z":"d8a6f7d1.58d348","name":"","topic":"","qos":"2","retain":"","broker":"513bf68b.579ef8","x":1170,"y":260,"wires":[]},{"id":"9470aee7.78db9","type":"mqtt in","z":"d8a6f7d1.58d348","name":"","topic":"server/position_in","qos":"2","datatype":"utf8","broker":"513bf68b.579ef8","x":660,"y":320,"wires":[["e6e50cf0.39597"]]},{"id":"fdf1843e.89c1b8","type":"mqtt in","z":"d8a6f7d1.58d348","name":"","topic":"server/cont_rm","qos":"2","datatype":"utf8","broker":"513bf68b.579ef8","x":700,"y":380,"wires":[["e6e50cf0.39597"]]},{"id":"37c118bd.484c18","type":"mqtt in","z":"d8a6f7d1.58d348","name":"","topic":"server/cont_add","qos":"2","datatype":"utf8","broker":"513bf68b.579ef8","x":720,"y":440,"wires":[["e6e50cf0.39597"]]},{"id":"e5e8a05f.cacaf","type":"inject","z":"d8a6f7d1.58d348","name":"Beacon2Position","topic":"beacon/output","payload":"ID,B2,Lat,10.00,Long,-10.00","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":220,"y":500,"wires":[["4e384cad.b89064"]]},{"id":"4dace93f.bcc4f8","type":"inject","z":"d8a6f7d1.58d348","name":"AnchorPosition","topic":"beacon/output","payload":"ID,A0,Lat,5.0,Long,-5.0","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":220,"y":440,"wires":[["4e384cad.b89064"]]},{"id":"3478f539.4557da","type":"mqtt out","z":"d8a6f7d1.58d348","name":"","topic":"","qos":"2","retain":"","broker":"513bf68b.579ef8","x":430,"y":340,"wires":[]},{"id":"19d796c0.ed94a9","type":"comment","z":"d8a6f7d1.58d348","name":"Server output","info":"","x":430,"y":300,"wires":[]},{"id":"c7a053d4.56ada","type":"mqtt in","z":"d8a6f7d1.58d348","name":"","topic":"server/position_out","qos":"2","datatype":"auto","broker":"513bf68b.579ef8","x":910,"y":800,"wires":[["4649b731.35f098"]]},{"id":"4649b731.35f098","type":"debug","z":"d8a6f7d1.58d348","name":"Angular","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":1100,"y":800,"wires":[]},{"id":"3fc7e97d.1cd306","type":"comment","z":"d8a6f7d1.58d348","name":"Container data being sent to angular","info":"","x":1000,"y":760,"wires":[]},{"id":"19abeec1.316c91","type":"inject","z":"d8a6f7d1.58d348","name":"Find container MC-741","topic":"server/position_in","payload":"MC-741","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":160,"y":340,"wires":[["3478f539.4557da"]]},{"id":"9e5e0b70.c5e1e8","type":"comment","z":"d8a6f7d1.58d348","name":"Data sent by beacon2 when movement detected","info":"","x":340,"y":520,"wires":[]},{"id":"77686fe1.c42aa","type":"comment","z":"d8a6f7d1.58d348","name":"Data sent by anchor when movement detected","info":"","x":330,"y":460,"wires":[]},{"id":"d5754e78.b1478","type":"inject","z":"d8a6f7d1.58d348","name":"Beacon2ID","topic":"beacon/output","payload":"ID,B2,Cont,MC-741","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":200,"y":680,"wires":[["4e384cad.b89064"]]},{"id":"ae112618.6a9c48","type":"comment","z":"d8a6f7d1.58d348","name":"Data sent by beacon2 when valid container ID detected","info":"The beacon will receive a list of valid container IDs from the server. Once a valid one is detected, it sends the detected ID which pairs the beacon with the container","x":360,"y":700,"wires":[]},{"id":"aaccc7a3.a657e8","type":"mqtt in","z":"d8a6f7d1.58d348","name":"","topic":"server/position_in","qos":"2","datatype":"auto","broker":"513bf68b.579ef8","x":900,"y":920,"wires":[["1015002a.81b2a"]]},{"id":"1015002a.81b2a","type":"debug","z":"d8a6f7d1.58d348","name":"Node red","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":1100,"y":920,"wires":[]},{"id":"4e2333ea.a72edc","type":"comment","z":"d8a6f7d1.58d348","name":"Container data requests being sent from angular","info":"","x":1040,"y":880,"wires":[]},{"id":"762c4250.be90ec","type":"mqtt in","z":"d8a6f7d1.58d348","name":"","topic":"server/battery","qos":"2","datatype":"auto","broker":"513bf68b.579ef8","x":890,"y":1040,"wires":[["7ae27a86.5f4bc4"]]},{"id":"7ae27a86.5f4bc4","type":"debug","z":"d8a6f7d1.58d348","name":"Angular","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":1100,"y":1040,"wires":[]},{"id":"a4e41350.af77e","type":"comment","z":"d8a6f7d1.58d348","name":"Beacon battery levels being sent to Angular","info":"","x":1020,"y":1000,"wires":[]},{"id":"f4501a3.76c9ae8","type":"inject","z":"d8a6f7d1.58d348","name":"Set anchor position","topic":"server/position_in","payload":"Anchor,Lat,20.0,Long,20.0","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":150,"y":280,"wires":[["3478f539.4557da"]]},{"id":"513bf68b.579ef8","type":"mqtt-broker","z":"","name":"","broker":"localhost","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""}]